<?xml version="1.0" encoding="utf-8" ?>
<ValidClasses>
	<ValidClass>
		<Name>System.Array</Name>
		<ValidMethod>
			<Signature>Clear(System.Array,Int32,Int32)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Array.Clear(System.Array,System.Int32,System.Int32)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Array.ConstrainedCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Array.Copy(System.Array,System.Array,System.Int32)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Array.Copy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Array.CopyTo(System.Array,System.Int32)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Array.GetLength(System.Int32)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Array.GetLowerBound(System.Int32)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Array.GetUpperBound(System.Int32)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Array.GetValue(System.Int32)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Array.GetValue(System.Int32,System.Int32)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Array.GetValue(System.Int32,System.Int32,System.Int32)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Array.GetValue(System.Int32[])</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Array.IndexOf(System.String[],System.String)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Array.IndexOf(System.String[],System.String,System.Int32)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Array.IndexOf(System.String[],System.String,System.Int32,System.Int32)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Array.SetValue(System.Object,System.Int32)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Array.SetValue(System.Object,System.Int32,System.Int32)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Array.SetValue(System.Object,System.Int32,System.Int32,System.Int32)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Array.SetValue(System.Object,System.Int32[])</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Array.get_Length()</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Array.get_Rank()</Signature>
		</ValidMethod>
	</ValidClass>
	<ValidClass>
		<Name>System.Boolean</Name>
		<ValidMethod>
			<Signature>System.Boolean.CompareTo(System.Boolean)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Boolean.CompareTo(System.Object)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Boolean.Equals(System.Boolean)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Boolean.Equals(System.Object)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Boolean.Parse(System.String)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Boolean.ToString()</Signature>
		</ValidMethod>
	</ValidClass>
	<ValidClass>
		<Name>System.Boolean[]</Name>
	</ValidClass>
	<ValidClass>
		<Name>System.Boolean[,]</Name>
	</ValidClass>
	<ValidClass>
		<Name>System.Boolean[,,]</Name>
	</ValidClass>
	<ValidClass>
		<Name>System.Buffer</Name>
		<ValidMethod>
			<Signature>System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Buffer.ByteLength(System.Array)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Buffer.GetByte(System.Array,System.Int32)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Buffer.SetByte(System.Array,System.Int32,System.Byte)</Signature>
		</ValidMethod>
	</ValidClass>
	<ValidClass>
		<Name>System.Byte</Name>
		<ValidMethod>
			<Signature>System.Byte.CompareTo(System.Byte)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Byte.CompareTo(System.Object)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Byte.Equals(System.Byte)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Byte.Equals(System.Object)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Byte.Parse(System.String)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Byte.ToString()</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Byte.TryParse(System.String,System.Byte)</Signature>
		</ValidMethod>
	</ValidClass>
	<ValidClass>
		<Name>System.Byte[]</Name>
	</ValidClass>
	<ValidClass>
		<Name>System.Byte[,]</Name>
	</ValidClass>
	<ValidClass>
		<Name>System.Byte[,,]</Name>
	</ValidClass>
	<ValidClass>
		<Name>System.Char</Name>
		<ValidMethod>
			<Signature>System.Char.CompareTo(System.Char)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Char.CompareTo(System.Object)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Char.Equals(System.Char)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Char.Equals(System.Object)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Char.GetNumericValue(System.Char)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Char.GetNumericValue(System.String,System.Int32)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Char.IsControl(System.Char)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Char.IsControl(System.String,System.Int32)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Char.IsDigit(System.Char)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Char.IsDigit(System.String,System.Int32)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Char.IsLetter(System.Char)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Char.IsLetter(System.String,System.Int32)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Char.IsLetterOrDigit(System.Char)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Char.IsLetterOrDigit(System.String,System.Int32)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Char.IsLower(System.Char)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Char.IsLower(System.String,System.Int32)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Char.IsNumber(System.Char)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Char.IsNumber(System.String,System.Int32)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Char.IsPunctuation(System.Char)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Char.IsPunctuation(System.String,System.Int32)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Char.IsSeparator(System.Char)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Char.IsSeparator(System.String,System.Int32)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Char.IsUpper(System.Char)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Char.IsUpper(System.String,System.Int32)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Char.IsWhiteSpace(System.Char)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Char.IsWhiteSpace(System.String,System.Int32)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Char.Parse(System.String)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Char.ToLower(System.Char)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Char.ToString()</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Char.ToString(System.Char)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Char.ToUpper(System.Char)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Char.TryParse(System.String,System.Char)</Signature>
		</ValidMethod>
	</ValidClass>
	<ValidClass>
		<Name>System.Char[]</Name>
	</ValidClass>
	<ValidClass>
		<Name>System.Char[,]</Name>
	</ValidClass>
	<ValidClass>
		<Name>System.Char[,,]</Name>
	</ValidClass>
	<ValidClass>
		<Name>System.CharEnumerator</Name>
		<ValidMethod>
			<Signature>System.CharEnumerator..ctor(System.String)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.CharEnumerator.MoveNext()</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.CharEnumerator.Reset()</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.CharEnumerator.get_Current()</Signature>
		</ValidMethod>
	</ValidClass>
	<ValidClass>
		<Name>System.DateTime</Name>
		<ValidMethod>
			<Signature>System.DateTime.get_Date()</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.DateTime.get_Day()</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.DateTime.get_DayOfWeek()</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.DateTime.get_DayOfYear()</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.DateTime.get_Hour()</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.DateTime.get_Millisecond()</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.DateTime.get_Minute()</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.DateTime.get_Month()</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.DateTime.get_Now()</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.DateTime.get_Second()</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.DateTime.get_Ticks()</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.DateTime.get_TimeOfDay()</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.DateTime.get_Today()</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.DateTime.get_UtcNow()</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.DateTime.get_Year()</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.DateTime.Add(System.TimeSpan)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.DateTime.AddDays(System.Double)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.DateTime.AddHours(System.Double)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.DateTime.AddMilliseconds(System.Double)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.DateTime.AddMinutes(System.Double)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.DateTime.AddMonths(System.Int32)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.DateTime.AddSeconds(System.Double)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.DateTime.AddTicks(System.Int64)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.DateTime.AddYears(System.Int32)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.DateTime.Compare(System.DateTime,System.DateTime)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.DateTime.CompareTo(System.DateTime)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.DateTime.CompareTo(System.Object)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.DateTime.DaysInMonth(System.Int32,System.Int32)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.DateTime.Equals(System.DateTime)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.DateTime.Equals(System.DateTime,System.DateTime)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.DateTime.Equals(System.Object)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.DateTime.IsDaylightSavingTime()</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.DateTime.IsLeapYear(System.Int32)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.DateTime.Subtract(System.DateTime)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.DateTime.Subtract(System.TimeSpan)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.DateTime.ToLocalTime()</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.DateTime.ToString()</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.DateTime.ToUniversalTime()</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.DateTime.op_Addition(System.DateTime,System.TimeSpan)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.DateTime.op_Equality(System.DateTime,System.DateTime)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.DateTime.op_GreaterThan(System.DateTime,System.DateTime)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.DateTime.op_GreaterThanOrEqual(System.DateTime,System.DateTime)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.DateTime.op_Inequality(System.DateTime,System.DateTime)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.DateTime.op_LessThan(System.DateTime,System.DateTime)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.DateTime.op_LessThanOrEqual(System.DateTime,System.DateTime)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.DateTime.op_Subtraction(System.DateTime,System.DateTime)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.DateTime.op_Subtraction(System.DateTime,System.TimeSpan)</Signature>
		</ValidMethod>
	</ValidClass>
	<ValidClass>
		<Name>System.DateTime[]</Name>
	</ValidClass>
	<ValidClass>
		<Name>System.DateTime[,]</Name>
	</ValidClass>
	<ValidClass>
		<Name>System.DateTime[,,]</Name>
	</ValidClass>
	<ValidClass>
		<Name>System.Double</Name>
		<ValidMethod>
			<Signature>System.Double.CompareTo(System.Double)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Double.CompareTo(System.Object)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Double.Equals(System.Double)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Double.Equals(System.Object)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Double.IsFinite(System.Double)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Double.IsInfinity(System.Double)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Double.IsNaN(System.Double)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Double.IsNegative(System.Double)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Double.IsNegativeInfinity(System.Double)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Double.IsNormal(System.Double)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Double.IsPositiveInfinity(System.Double)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Double.IsSubnormal(System.Double)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Double.Parse(System.String)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Double.ToString()</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Double.TryParse(System.String,System.Double)</Signature>
		</ValidMethod>
	</ValidClass>
	<ValidClass>
		<Name>System.Double[]</Name>
	</ValidClass>
	<ValidClass>
		<Name>System.Double[,]</Name>
	</ValidClass>
	<ValidClass>
		<Name>System.Double[,,]</Name>
	</ValidClass>
	<ValidClass>
		<Name>System.Int16</Name>
		<ValidMethod>
			<Signature>System.Int16.CompareTo(System.Int16)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Int16.CompareTo(System.Object)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Int16.Equals(System.Int16)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Int16.Equals(System.Object)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Int16.Parse(System.String)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Int16.ToString()</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Int16.TryParse(System.String,System.Int16)</Signature>
		</ValidMethod>
	</ValidClass>
	<ValidClass>
		<Name>System.Int16[]</Name>
	</ValidClass>
	<ValidClass>
		<Name>System.Int16[,]</Name>
	</ValidClass>
	<ValidClass>
		<Name>System.Int16[,,]</Name>
	</ValidClass>
	<ValidClass>
		<Name>System.Int32</Name>
		<ValidMethod>
			<Signature>System.Int32.CompareTo(System.Int32)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Int32.CompareTo(System.Object)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Int32.Equals(System.Int32)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Int32.Equals(System.Object)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Int32.Parse(System.String)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Int32.ToString()</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Int32.TryParse(System.String,System.Int32)</Signature>
		</ValidMethod>
	</ValidClass>
	<ValidClass>
		<Name>System.Int32[]</Name>
	</ValidClass>
	<ValidClass>
		<Name>System.Int32[,]</Name>
	</ValidClass>
	<ValidClass>
		<Name>System.Int32[,,]</Name>
	</ValidClass>
	<ValidClass>
		<Name>System.Int64</Name>
		<ValidMethod>
			<Signature>System.Int64.CompareTo(System.Int64)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Int64.CompareTo(System.Object)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Int64.Equals(System.Int64)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Int64.Equals(System.Object)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Int64.Parse(System.String)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Int64.ToString()</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Int64.TryParse(System.String,System.Int64)</Signature>
		</ValidMethod>
	</ValidClass>
	<ValidClass>
		<Name>System.Int64[]</Name>
	</ValidClass>
	<ValidClass>
		<Name>System.Int64[,]</Name>
	</ValidClass>
	<ValidClass>
		<Name>System.Int64[,,]</Name>
	</ValidClass>
	<ValidClass>
		<Name>System.Math</Name>
		<ValidMethod>
			<Signature>System.Math.Abs(System.Double)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Math.Abs(System.Int16)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Math.Abs(System.Int32)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Math.Abs(System.Int64)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Math.Abs(System.SByte)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Math.Abs(System.Single)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Math.Acos(System.Double)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Math.Acosh(System.Double)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Math.Asin(System.Double)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Math.Asinh(System.Double)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Math.Atan(System.Double)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Math.Atanh(System.Double)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Math.Atan2(System.Double,System.Double)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Math.BigMul(System.Int32,System.Int32)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Math.BitDecrement(System.Double)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Math.BitIncrement(System.Double)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Math.Cbrt(System.Double)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Math.Ceiling(System.Double)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Math.Clamp(System.Byte,System.Byte,System.Byte)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Math.Clamp(System.Double,System.Double,System.Double)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Math.Clamp(System.Int16,System.Int16,System.Int16)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Math.Clamp(System.Int32,System.Int32,System.Int32)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Math.Clamp(System.Int64,System.Int64,System.Int64)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Math.Clamp(System.SByte,System.SByte,System.SByte)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Math.Clamp(System.UInt16,System.UInt16,System.UInt16)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Math.Clamp(System.UInt32,System.UInt32,System.UInt32)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Math.Clamp(System.UInt64,System.UInt64,System.UInt64)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Math.CopySign(System.Double,System.Double)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Math.Cos(System.Double)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Math.Cosh(System.Double)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Math.DivRem(System.Int32,System.Int32,System.Int32)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Math.DivRem(System.Int64,System.Int64,System.Int64)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Math.Exp(System.Double)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Math.Floor(System.Double)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>FusedMultiplyAdd(System.Double,System.Double,System.Double)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Math.IEEERemainder(System.Double,System.Double)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Math.ILogB(System.Double)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Math.Log(System.Double)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Math.Log(System.Double,System.Double)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Math.Log10(System.Double)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Math.Max(System.Byte,System.Byte)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Math.Max(System.Double,System.Double)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Math.Max(System.Int16,System.Int16)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Math.Max(System.Int32,System.Int32)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Math.Max(System.Int64,System.Int64)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Math.Max(System.SByte,System.SByte)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Math.Max(System.Single,System.Single)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Math.Max(System.UInt16,System.UInt16)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Math.Max(System.UInt32,System.UInt32)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Math.Max(System.UInt64,System.UInt64)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Math.MaxMagnitude(System.Double,System.Double)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Math.Min(System.Byte,System.Byte)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Math.Min(System.Double,System.Double)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Math.Min(System.Int16,System.Int16)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Math.Min(System.Int32,System.Int32)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Math.Min(System.Int64,System.Int64)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Math.Min(System.SByte,System.SByte)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Math.Min(System.Single,System.Single)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Math.Min(System.UInt16,System.UInt16)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Math.Min(System.UInt32,System.UInt32)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Math.Min(System.UInt64,System.UInt64)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Math.MinMagnitude(System.Double,System.Double)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Math.Pow(System.Double,System.Double)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Math.Round(System.Double)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Math.Round(System.Double,System.Int32)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Math.Round(System.Double,System.Int32,System.MidpointRounding)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>ScaleB(System.Double,System.Int32)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Math.Sign(System.Double)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Math.Sign(System.Int16)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Math.Sign(System.Int32)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Math.Sign(System.Int64)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Math.Sign(System.SByte)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Math.Sign(System.Single)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Math.Sin(System.Double)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Math.Sinh(System.Double)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Math.Sqrt(System.Double)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Math.Tan(System.Double)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Math.Tanh(System.Double)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Math.Truncate(System.Double)</Signature>
		</ValidMethod>
	</ValidClass>
	<ValidClass>
		<Name>System.MidpointRounding</Name>
	</ValidClass>
	<ValidClass>
		<Name>System.SByte</Name>
		<ValidMethod>
			<Signature>System.SByte.CompareTo(System.Object)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.SByte.CompareTo(System.SByte)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.SByte.Equals(System.Object)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.SByte.Equals(System.SByte)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.SByte.Parse(System.String)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.SByte.ToString()</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.SByte.TryParse(System.String,System.SByte)</Signature>
		</ValidMethod>
	</ValidClass>
	<ValidClass>
		<Name>System.SByte[]</Name>
	</ValidClass>
	<ValidClass>
		<Name>System.SByte[,]</Name>
	</ValidClass>
	<ValidClass>
		<Name>System.SByte[,,]</Name>
	</ValidClass>
	<ValidClass>
		<Name>System.Single</Name>
		<ValidMethod>
			<Signature>System.Single.CompareTo(System.Object)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Single.CompareTo(System.Single)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Single.Equals(System.Object)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Single.Equals(System.Single)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Single.IsFinite(System.Single)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Single.IsInfinity(System.Single)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Single.IsNaN(System.Single)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Single.IsNegative(System.Single)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Single.IsNegativeInfinity(System.Single)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Single.IsNormal(System.Single)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Single.IsPositiveInfinity(System.Single)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Single.IsSubnormal(System.Single)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Single.Parse(System.String)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Single.ToString()</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Single.TryParse(System.String,System.Single)</Signature>
		</ValidMethod>
	</ValidClass>
	<ValidClass>
		<Name>System.Single[]</Name>
	</ValidClass>
	<ValidClass>
		<Name>System.Single[,]</Name>
	</ValidClass>
	<ValidClass>
		<Name>System.Single[,,]</Name>
	</ValidClass>
	<ValidClass>
		<Name>System.String</Name>
	</ValidClass>
	<ValidClass>
		<Name>System.String[]</Name>
		<ValidMethod>
			<Signature>System.String.get_Chars(System.Int32)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.String.get_Length()</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.String.Compare(System.String,System.String)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.String.Compare(System.String,System.String,System.Boolean)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.String.CompareOrdinal(System.String,System.Int32,System.String,System.Int32,System.Int32)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.String.CompareOrdinal(System.String,System.String)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.String.CompareTo(System.Object)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.String.CompareTo(System.String)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.String.Concat(System.Object[])</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.String.Concat(System.String[])</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.String.Concat(System.String,System.String)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.String.Concat(System.String,System.String,System.String)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.String.Concat(System.String,System.String,System.String,System.String)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.String.Concat(System.String,System.String,System.String,System.String,System.String)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.String.Concat(System.String,System.String,System.String,System.String,System.String,System.String)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.String.Concat(System.String,System.String,System.String,System.String,System.String,System.String,System.String)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.String.Concat(System.Object,System.Object)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.String.Concat(System.Object,System.Object,System.Object)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.String.Concat(System.Object,System.Object,System.Object,System.Object)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.String.Concat(System.Object,System.Object,System.Object,System.Object,System.Object)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.String.Concat(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.String.Concat(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.String.Contains(System.String)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.String.Copy(System.String)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.String.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.String.EndsWith(System.Char)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.String.EndsWith(System.String)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.String.Equals(System.String)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.String.Equals(System.String,System.String)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.String.GetEnumerator()</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.String.IndexOf(System.Char)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.String.IndexOf(System.String)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.String.IndexOf(System.String,System.Int32)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.String.IndexOf(System.Char,System.Int32)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.String.IndexOf(System.Char,System.Int32,System.Int32)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.String.IndexOf(System.String,System.Int32,System.Int32)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.String.IndexOfAny(System.Char[])</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.String.IndexOfAny(System.Char[],System.Int32)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.String.IndexOfAny(System.Char[],System.Int32,System.Int32)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.String.Insert(System.Int32,System.String)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.String.IsNullOrEmpty(System.String)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.String.IsNullOrWhiteSpace(System.String)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.String.Join(System.Char,System.Object[])</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.String.Join(System.Char,System.String[])</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.String.Join(System.String,System.Object[])</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.String.Join(System.String,System.String[])</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.String.Join(System.Char,System.String[],System.Int32,System.Int32)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.String.Join(System.String,System.String[],System.Int32,System.Int32)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.String.LastIndexOf(System.Char)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.String.LastIndexOf(System.Char,System.Int32)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.String.LastIndexOf(System.Char,System.Int32,System.Int32)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.String.LastIndexOf(System.String)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.String.LastIndexOf(System.String,System.Int32)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.String.LastIndexOf(System.String,System.Int32,System.Int32)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.String.LastIndexOfAny(System.Char[])</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.String.LastIndexOfAny(System.Char[],System.Int32)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.String.LastIndexOfAny(System.Char[],System.Int32,System.Int32)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.String.PadLeft(System.Int32)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.String.PadLeft(System.Int32,System.Char)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.String.PadRight(System.Int32)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.String.PadRight(System.Int32,System.Char)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.String.Remove(System.Int32)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.String.Remove(System.Int32,System.Int32)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.String.Replace(System.Char,System.Char)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.String.Replace(System.String,System.String)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.String.StartsWith(System.String)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.String.Substring(System.Int32)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.String.Substring(System.Int32,System.Int32)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.String.ToCharArray()</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.String.ToCharArray(System.Int32,System.Int32)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.String.ToLower()</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.String.ToLowerInvariant()</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.String.ToString()</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.String.ToUpper()</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.String.ToUpperInvariant()</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.String.Trim()</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.String.Trim(System.Char[])</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.String.TrimEnd(System.Char[])</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.String.TrimStart(System.Char[])</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.String.op_Equality(System.String,System.String)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.String.op_Implicit(System.String)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.String.op_Inequality(System.String,System.String)</Signature>
		</ValidMethod>
	</ValidClass>
	<ValidClass>
		<Name>System.String[,]</Name>
	</ValidClass>
	<ValidClass>
		<Name>System.String[,,]</Name>
	</ValidClass>
	<ValidClass>
		<Name>System.Text.StringBuilder</Name>
		<ValidMethod>
			<Signature>System.Text.StringBuilder.get_Capacity()</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Text.StringBuilder.get_Chars(System.Int32)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Text.StringBuilder.get_Length()</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Text.StringBuilder.get_MaxCapacity()</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Text.StringBuilder.set_Capacity(System.Int32)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Text.StringBuilder.set_Chars(System.Int32,System.Char)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Text.StringBuilder.set_Length(System.Int32)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Text.StringBuilder.Append(System.Boolean)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Text.StringBuilder.Append(System.Byte)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Text.StringBuilder.Append(System.Char)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Text.StringBuilder.Append(System.Char,System.Int32)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Text.StringBuilder.Append(System.Char[])</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Text.StringBuilder.Append(System.Char[],System.Int32,System.Int32)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Text.StringBuilder.Append(System.Double)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Text.StringBuilder.Append(System.Int16)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Text.StringBuilder.Append(System.Int32)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Text.StringBuilder.Append(System.Int64)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Text.StringBuilder.Append(System.Object)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Text.StringBuilder.Append(System.SByte)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Text.StringBuilder.Append(System.Single)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Text.StringBuilder.Append(System.String)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Text.StringBuilder.Append(System.String,System.Int32,System.Int32)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Text.StringBuilder.Append(System.UInt16)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Text.StringBuilder.Append(System.UInt32)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Text.StringBuilder.Append(System.UInt64)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Text.StringBuilder.AppendLine()</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Text.StringBuilder.AppendLine(System.String)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Text.StringBuilder.Clear()</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Text.StringBuilder.EnsureCapacity(System.Int32)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Text.StringBuilder.Equals(System.Text.StringBuilder)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Text.StringBuilder.Insert(System.Int32,System.Boolean)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Text.StringBuilder.Insert(System.Int32,System.Byte)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Text.StringBuilder.Insert(System.Int32,System.Char)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Text.StringBuilder.Insert(System.Int32,System.Char[])</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Text.StringBuilder.Insert(System.Int32,System.Char[],System.Int32,System.Int32)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Text.StringBuilder.Insert(System.Int32,System.Double)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Text.StringBuilder.Insert(System.Int32,System.Int16)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Text.StringBuilder.Insert(System.Int32,System.Int32)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Text.StringBuilder.Insert(System.Int32,System.Int64)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Text.StringBuilder.Insert(System.Int32,System.Object)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Text.StringBuilder.Insert(System.Int32,System.SByte)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Text.StringBuilder.Insert(System.Int32,System.Single)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Text.StringBuilder.Insert(System.Int32,System.String,System.Int32)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Text.StringBuilder.Insert(System.Int32,System.UInt16)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Text.StringBuilder.Insert(System.Int32,System.UInt32)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Text.StringBuilder.Insert(System.Int32,System.UInt64)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Text.StringBuilder.Replace(System.Char,System.Char)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Text.StringBuilder.Replace(System.Char,System.Char,System.Int32,System.Int32)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Text.StringBuilder.Replace(System.String,System.String)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Text.StringBuilder.Replace(System.String,System.String,System.Int32,System.Int32)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Text.StringBuilder.ToString()</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Text.StringBuilder.ToString(System.Int32,System.Int32)</Signature>
		</ValidMethod>
	</ValidClass>
	<ValidClass>
		<Name>System.TimeSpan</Name>
		<ValidMethod>
			<Signature>System.TimeSpan.get_Days()</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.TimeSpan.get_Hours()</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.TimeSpan.get_Milliseconds()</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.TimeSpan.get_Minutes()</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.TimeSpan.get_Seconds()</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.TimeSpan.get_Ticks()</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.TimeSpan.get_TotalDays()</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.TimeSpan.get_TotalHours()</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.TimeSpan.get_TotalMilliseconds()</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.TimeSpan.get_TotalMinutes()</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.TimeSpan.get_TotalSeconds()</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.TimeSpan.Add(System.TimeSpan)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.TimeSpan.Compare(System.TimeSpan,System.TimeSpan)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.TimeSpan.CompareTo(System.Object)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.TimeSpan.CompareTo(System.TimeSpan)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.TimeSpan.Divide(System.Double)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.TimeSpan.Divide(System.TimeSpan)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.TimeSpan.Duration()</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.TimeSpan.Equals(System.TimeSpan,System.TimeSpan)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.TimeSpan.Equals(System.TimeSpan)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.TimeSpan.Equals(System.Object)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.TimeSpan.FromDays(System.Double)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.TimeSpan.FromHours(System.Double)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.TimeSpan.FromMilliseconds(System.Double)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.TimeSpan.FromMinutes(System.Double)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.TimeSpan.FromSeconds(System.Double)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.TimeSpan.FromTicks(System.Int64)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.TimeSpan.Multiply(System.Double)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.TimeSpan.Negate()</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.TimeSpan.Parse(System.String)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.TimeSpan.Subtract(System.TimeSpan)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.TimeSpan.ToString()</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.TimeSpan.TryParse(System.String,System.TimeSpan)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.TimeSpan.op_Addition(System.TimeSpan,System.TimeSpan)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.TimeSpan.op_Division(System.TimeSpan,System.Double)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.TimeSpan.op_Division(System.TimeSpan,System.TimeSpan)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.TimeSpan.op_Equality(System.TimeSpan,System.TimeSpan)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.TimeSpan.op_GreaterThan(System.TimeSpan,System.TimeSpan)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.TimeSpan.op_GreaterThanOrEqual(System.TimeSpan,System.TimeSpan)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.TimeSpan.op_Inequality(System.TimeSpan,System.TimeSpan)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.TimeSpan.op_LessThan(System.TimeSpan,System.TimeSpan)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.TimeSpan.op_LessThanOrEqual(System.TimeSpan,System.TimeSpan)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.TimeSpan.op_Multiply(System.TimeSpan,System.Double)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.TimeSpan.op_Multiply(System.Double,System.TimeSpan)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.TimeSpan.op_Subtraction(System.TimeSpan,System.TimeSpan)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.TimeSpan.op_UnaryNegation(System.TimeSpan)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.TimeSpan.op_UnaryPlus(System.TimeSpan)</Signature>
		</ValidMethod>
	</ValidClass>
	<ValidClass>
		<Name>System.TimeSpan[]</Name>
	</ValidClass>
	<ValidClass>
		<Name>System.TimeSpan[,]</Name>
	</ValidClass>
	<ValidClass>
		<Name>System.TimeSpan[,,]</Name>
	</ValidClass>
	<ValidClass>
		<Name>System.UInt16</Name>
		<ValidMethod>
			<Signature>System.UInt16.CompareTo(System.Object)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.UInt16.CompareTo(System.UInt16)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.UInt16.Equals(System.Object)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.UInt16.Equals(System.UInt16)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.UInt16.Parse(System.String)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.UInt16.ToString()</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.UInt16.TryParse(System.String,System.UInt16)</Signature>
		</ValidMethod>
	</ValidClass>
	<ValidClass>
		<Name>System.UInt16[]</Name>
	</ValidClass>
	<ValidClass>
		<Name>System.UInt16[,]</Name>
	</ValidClass>
	<ValidClass>
		<Name>System.UInt16[,,]</Name>
	</ValidClass>
	<ValidClass>
		<Name>System.UInt32</Name>
		<ValidMethod>
			<Signature>System.UInt32.CompareTo(System.Object)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.UInt32.CompareTo(System.UInt32)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.UInt32.Equals(System.Object)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.UInt32.Equals(System.UInt32)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.UInt32.Parse(System.String)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.UInt32.ToString()</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.UInt32.TryParse(System.String,System.UInt32)</Signature>
		</ValidMethod>
	</ValidClass>
	<ValidClass>
		<Name>System.UInt32[]</Name>
	</ValidClass>
	<ValidClass>
		<Name>System.UInt32[,]</Name>
	</ValidClass>
	<ValidClass>
		<Name>System.UInt32[,,]</Name>
	</ValidClass>
	<ValidClass>
		<Name>System.UInt64</Name>
		<ValidMethod>
			<Signature>System.UInt64.CompareTo(System.Object)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.UInt64.CompareTo(System.UInt64)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.UInt64.Equals(System.Object)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.UInt64.Equals(System.UInt64)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.UInt64.Parse(System.String)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.UInt64.ToString()</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.UInt64.TryParse(System.String,System.UInt64)</Signature>
		</ValidMethod>
	</ValidClass>
	<ValidClass>
		<Name>System.UInt64[]</Name>
	</ValidClass>
	<ValidClass>
		<Name>System.UInt64[,]</Name>
	</ValidClass>
	<ValidClass>
		<Name>System.UInt64[,,]</Name>
	</ValidClass>
	<ValidClass>
		<Name>System.Object</Name>
		<ValidMethod>
			<Signature>System.Object..ctor()</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Object.Equals(System.Object)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Object.Equals(System.Object,System.Object)</Signature>
		</ValidMethod>
		<ValidMethod>
			<Signature>System.Object.ToString()</Signature>
		</ValidMethod>
	</ValidClass>
	<ValidClass>
		<Name>System.Object[]</Name>
	</ValidClass>
	<ValidClass>
		<Name>System.Object[,]</Name>
	</ValidClass>
	<ValidClass>
		<Name>System.Object[,,]</Name>
	</ValidClass>
	<ValidClass>
		<Name>System.Void</Name>
	</ValidClass>
	<ValidClass>
		<Name>System.Exception</Name>
	</ValidClass>
	<ValidClass>
		<Name>System.IndexOutOfRangeException</Name>
	</ValidClass>
	<ValidClass>
		<Name>System.ArgumentNullException</Name>
	</ValidClass>
	<ValidClass>
		<Name>System.RankException</Name>
	</ValidClass>
	<ValidClass>
		<Name>System.ArgumentOutOfRangeException</Name>
	</ValidClass>
	<ValidClass>
		<Name>System.ArgumentException</Name>
	</ValidClass>
	<ValidClass>
		<Name>System.InvalidCastException</Name>
	</ValidClass>
	<ValidClass>
		<Name>System.InvalidOperationException</Name>
	</ValidClass>
	<ValidClass>
		<Name>System.FormatException</Name>
	</ValidClass>
	<ValidClass>
		<Name>System.OverflowException</Name>
	</ValidClass>
	<ValidClass>
		<Name>System.ThrowMinMaxException</Name>
	</ValidClass>
	<ValidClass>
		<Name>System.ArithmeticException</Name>
	</ValidClass>
	<ValidClass>
		<Name>System.DivideByZeroException</Name>
	</ValidClass>
</ValidClasses>
